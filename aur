#!/bin/bash

aurDir=~/aur
markerFile='.update_pulled.temp'
gitDirRegex='^.*/(.*).git$'

# Used during new install process
pkgDir=''

clean() {
    if ls | grep pkg.tar.zst > /dev/null ; then
        todelete=`ls *.pkg.tar.zst`

        echo -e "Found package files to clean...\n$todelete\n"
        read -p "Remove? [Y/n] " -n 1 response < /dev/tty
        case "${response:0:1}" in
            n|N )
                return 1
            ;;
            * )
                rm $todelete
            ;;
        esac
    fi
}

clone() {
    git clone $1 || exit 1
}

check_update() {
    gpout=`git pull`
    [ "$gpout" = "Already up to date." ] || echo $gpout

    [ -f "$markerFile" ] && return 0
    [ "$gpout" = "Already up to date." ] && return 1

    touch $markerFile
    return 0
}

check_dirname() {
    cd "$1"
    check_update
}

build() {
    read -p "Build? [Y/n/(e)xit] " -n 1 response < /dev/tty
    case "${response:0:1}" in
        e|E )
            exit 0
        ;;
        n|N )
            return 1
        ;;
        y|Y|* )
            makepkg -scCf < /dev/tty || return 1
        ;;
    esac
    return 0
}

install() {
    # Assumes working dir is a repo with a built package with a built package
    pkg=`ls *.pkg.tar.zst`
    
    if [ $( echo "$pkg" | wc -l ) -gt 1 ]; then
        echo -e "Found multiple packages!\n"
        PS3="Choose installation: "
        select selection in $(echo "$pkg"); do
            pkg="$selection"
            break
        done
    elif [ -f "$pkg" ]; then
        echo "Found package '$pkg'"
    else
        echo "Package file not found"
        echo 1
    fi

    if sudo pacman -U $pkg < /dev/tty ; then
        test -f $markerFile && rm $markerFile
        return 0
    else
        return 1 # may want to return 1 in the future
    fi
}

set_pkg_dir() {
    # arg 1 is the git remote url
    if [[ "$1" =~ $gitDirRegex ]]; then
        pkgDir="${BASH_REMATCH[1]}"
        return 0
    else
        echo "Couldn't parse for repo folder"
        exit 1
    fi
}

update_workdir() {
    check_update || return 0 # doesn't really matter what this is as long as it returns
    build || return 1
    install || return 1
    clean
}

update_dirname() {
    cd $aurDir
    if [ -d "$1" ]; then
        cd "$1"
        update_workdir
    else
        echo "Package dir '$1' not found"
        # Maybe return 1 instead to not drop out
        exit 1
    fi
}

new_clone() {
    # arg 1 is the git remote url
    cd $aurDir
    # Get the repo dir in $pkgDir
    set_pkg_dir $1
    
    # Exit when the target is already installed
    [ -d "$aurDir/$pkgDir" ] && { return 0; }

    # Clone the repo (ends up in that dir)
    clone $1
    # It's basically update_workdir $pkgDir from here.
    cd "$pkgDir"
    touch $markerFile
}

new_install() {
    # arg 1 is the git remote url
    cd $aurDir
    # Get the repo dir in $pkgDir
    set_pkg_dir $1
    
    # Run an update when the target is already installed
    [ -d "$aurDir/$pkgDir" ] && { update_dirname "$pkgDir"; return $?; }

    # Clone the repo (ends up in that dir)
    clone $1
    # It's basically update_workdir $pkgDir from here.
    cd "$pkgDir"
    touch $markerFile
    echo "Working directory '$PWD'"
    build || return 0
    install || return 0
    clean
}

update_all() {
    for dir in $aurDir/*; do
        check_dirname $dir &
    done

    wait

    for dir in $aurDir/*; do
        echo "Checking '$(basename $dir)'..."
        [ -f "$dir/$markerFile" ] || continue
        # Passing the full dir to update_dirname() defeats
        # what it does but that is fine.
        update_dirname $dir
    done
}

stdin_install() {
    while : ; do
        read -r target || break
        echo "Starting $target"
        new_clone $target &
    done

    wait

    update_all

    return 0
}

remove_dirname() {
    cd $aurDir
    if [ -d "$1" ]; then
        rm -rf "$1"
        echo "Deleted '$aurDir/$1'"
    else
        echo "Package dir '$1' not found"
    fi
    if sudo pacman -Rs $1; then
        return 0
    else
        return 1
    fi
}

# arg 1 is '-<command char>'
case "${1:1:2}" in
    i )
        if [ "$2" == "-" ]; then
            stdin_install
        else
            new_install $2
        fi
    ;;
    u )
        update_dirname $2
    ;;
    a )
        update_all
    ;;
    r )
        remove_dirname $2
    ;;
    h )
        echo -e 'Usage: aur [option] [TARGET]'

        echo -e '  -i      install package from TARGET git repo url'
        echo -e '          If TARGET is a single - a list of targets'
        echo -e '          will be read from STDIN\n'
        echo -e '  -u      update package TARGET\n'
        echo -e '  -a      update all packages\n'
        echo -e '  -r      remove package TARGET'
        echo -e '          attempts to remove depencencies with pacman -Rs\n'
        echo -e '  -l      list downloaded packages\n'
    ;;
    l|* )
        ls -1 $aurDir
    ;;
esac

